- Cấu hình permission gây phức tạp vấn đề, có thể chỉ cần kiểm tra role của user là được rồi.


- Đã hoàn thành :


- Nhiệm vụ cần làm :
+ Khi đặt hàng xong gửi mail về thông tin đơn hàng
+ Cache dữ liệu
+ Web socket nói chuyện giữa người bán người mua
+ Thanh toán
+ Lập lịch gửi mail tự động
+ Notification
+ Cấu hình lại permission
+ Kafka 

+ Docker đóng gói lại 
+ FrontEnd
+ Mobile App

1. Test
- junit để test , dùng mockito để tạo các dependence , cài plugin jacoco để xem test cover
- Tạo như này thì nó không đếm từ 1 đổ lên mà 1 dãy ngẫu nhiên
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private String id;

2. MOnitor hệ thống, Xử Lý log
- ELK Stack : Tương tác với log, application log, ngnix log
Có thể tạo dashBoard , vd số lượng request mỗi phút theo responce code
Đo latency của request

@Slf4j : Của Lombox giúp log dễ dàng hơn
Spring có CommonRequestLoggingFilter có thể override lại để log 

- Có các nền tảng/ thư viện giúp thu thập dữ liệu, sức khoẻ hệ thống như Prometheus ,Elactic stack,...
Collect latency của API, cpu memory usage của instance, có các annotation của thư viện giúp thu thập mấy cái này (@Timed)
Prometheus cài vào dự án sẽ thu thập thông tin đẩy ra enpoint , ta có thể dùng Grafana để visualize data mà Prometheus nhận được
actuator/  actuator/prometheus

3. Kubernetes (K8S)
Quản lý docker trong môi trường production và cung cấp service như fault tolerance hay load balance