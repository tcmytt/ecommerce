Áp dụng mạng tích chập (CNN) và DenseNet201 vào xây dựng mô hình bán trái cây tự động dựa trên thị giác máy tính
12348888

- Quan hệ OneToMany
mappedBy đứng trên list (Ví dụ cart có nhiều cartDetail(list) thì cart là thằng cầm mappedBy), 
thằng cartDetail cầm cartId và trên nó là JoinColumn, owning side là cartDetail, cart là inverse side
Khi thêm/xoá phần tử bên chủ động(owning side) JPA sẽ cập nhập bảng bị động(inverse side)

- Quan hệ ManyToMany
Dùng joinTable viết bên chủ động ví dụ role và permission thì viết bên role
Bên còn lại dùng mappedBy
Khi thêm/xoá phần tử bên chủ động JPA sẽ cập nhập bảng trung gian

@JsonIgnore là một annotation của Jackson, được sử dụng để được dùng để kiểm soát việc bỏ qua (ignore) 
một thuộc tính cụ thể khi chuyển đổi đối tượng Java thành JSON (serialization) hoặc ngược lại (deserialization).
+ Ngăn chặn lặp vô hạn (Infinite Recursion) trong mối quan hệ hai chiều
+ Dùng trước thông tin nhạy cảm như password hay token để nó không chuyển từ java obj thành phản hồi json
+ Ngăn chặn deserialize không mong muốn (Dùng trước id để id chỉ được tự động tăng trong cơ sở dữ liệu mà ko dc gán từ json)


- Quy trình chuyển đổi giữa các tầng về thời gian (Bỏ chuyển sang dùng Instant)
+ Từ React → Spring Boot
Frontend (React): Gửi ngày giờ dưới dạng chuỗi ISO 8601.
const isoString = new Date().toISOString(); // "2023-10-25T14:30:00.000Z"
Backend (Spring Boot): Nhận chuỗi ISO 8601 và chuyển đổi thành LocalDateTime hoặc ZonedDateTime.
@JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", timezone = "UTC")
private LocalDateTime dateTime;

+ Từ Spring Boot → MySQL
Backend (Spring Boot): Lưu trữ ngày giờ dưới dạng LocalDateTime hoặc ZonedDateTime.
Database (MySQL): Sử dụng kiểu DATETIME hoặc TIMESTAMP.

+ Từ MySQL → Spring Boot → React
Database (MySQL): Truy vấn ngày giờ dưới dạng DATETIME hoặc TIMESTAMP.
Backend (Spring Boot): Chuyển đổi thành chuỗi ISO 8601 trước khi trả về frontend.
@JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", timezone = "UTC")
private LocalDateTime dateTime;
Frontend (React): Nhận chuỗi ISO 8601 và chuyển đổi thành Date object
const date = new Date(isoString);

- Quy trình upload file :
+ Upload file ảnh như avatar, productImage, catagoryImage được lưu vào src/main/resources/static/upload

- Thêm seedData vào bằng CommandLineRunner

- Sinh key jwt base 64 : node -e "console.log(require('crypto').randomBytes(64).toString('base64'));"
Header: Chứa thông tin về thuật toán mã hóa và loại token
Payload: Chứa thông tin người dùng và các claim (yêu cầu)
Signature: Được tạo bằng cách mã hóa Header và Payload với một secret key.
+ Nếu nội dung của Header hoặc Payload bị thay đổi, chữ ký sẽ không còn hợp lệ, giúp phát hiện việc giả mạo.


- Cách tạo truy vấn
public interface ProductRepository extends JpaRepository<Product, Long> {

    // Tìm sản phẩm theo tên
    List<Product> findByName(String name);

    // Tìm sản phẩm có giá lớn hơn một giá trị
    List<Product> findByPriceGreaterThan(BigDecimal price);

    // Tìm sản phẩm có tên chứa một chuỗi
    List<Product> findByNameContaining(String keyword);

    // Tìm sản phẩm thuộc một danh mục và sắp xếp theo giá
    List<Product> findByCategoryOrderByPriceAsc(String category);

    // Đếm số lượng sản phẩm thuộc một danh mục
    long countByCategory(String category);

    // Kiểm tra xem có tồn tại sản phẩm với tên cụ thể hay không
    boolean existsByName(String name);

    // Xóa sản phẩm có tên cụ thể
    void deleteByName(String name);
}

git remote add origin https://github.com/tcmytt/ecommerce.git
git branch -M main
git push -u origin main

git config --global user.name "Hiep"
git config --global user.email "tcmytt@gmail.com"

Cách lấy ảnh : http://localhost:8080/upload/products/abc123_image.jpg
<img
    src={`http://localhost:8080${product.mainImage}`}
    alt={product.name}
    style={{ width: "150px", height: "150px", objectFit: "cover" }}
/>



Sau khi thêm thư viện vào build.gradle, bạn cần chạy lệnh để tải thư viện về máy tính của mình.
// Nó sẽ chạy lại lệnh tạo csdl nên cần kết nối mysql
Sử dụng lệnh sau để tải và cập nhật dependencies:
./gradlew build --refresh-dependencies
--refresh-dependencies: Buộc Gradle tải lại tất cả các dependencies thay vì sử dụng cache.

Nếu bạn chỉ muốn tải dependencies mà không cần build toàn bộ dự án:
./gradlew dependencies

Câu lệnh clean và build
./gradlew clean build
clean: Xóa các file đã biên dịch trước đó.
build: Biên dịch lại dự án và tải dependencies mới.

git reset --soft
--soft : Quay lại trạng thái trước commit, nhưng giữ lại tất cả các thay đổi trong staging area (tức là các file đã được thêm vào git add

git reset --soft HEAD~2
HEAD~2: Chỉ định quay lại 2 commit trước


http://localhost:8080/swagger-ui.html

Cấu hình intercepter permission

Khi đặt hàng xong gửi mail về thông tin đơn hàng

- Review API
POST /api/v1/reviews
{
    "productId": 1,
    "rating": 5,
    "title": "Great product!",
    "content": "This product exceeded my expectations. Highly recommended!"
}

GET /api/v1/reviews/product/1
[
    {
        "id": 1,
        "productId": 1,
        "userId": 1,
        "rating": 5,
        "title": "Great product!",
        "content": "This product exceeded my expectations. Highly recommended!",
        "createdAt": "2023-10-01T12:00:00"
    },
    {
        "id": 2,
        "productId": 1,
        "userId": 2,
        "rating": 4,
        "title": "Good product",
        "content": "The product is good but could be better.",
        "createdAt": "2023-10-01T12:10:00"
    }
]

PUT /api/v1/reviews/1
{
    "productId": 1,
    "rating": 4,
    "title": "Updated review",
    "content": "I've updated my review after further use of the product."
}

DELETE /api/v1/reviews/1

- Coupon API 
POST /api/v1/coupons
{
    "type": "PERCENTAGE",
    "code": "SUMMER20",
    "value": 20.0,
    "startDate": "2023-10-01",
    "endDate": "2023-10-31",
    "minSpend": 100.0,
    "maxSpend": 500.0,
    "usesPerUser": 1,
    "usesPerCoupon": 100,
    "status": true
}

GET /api/v1/coupons/status/true
[
    {
        "id": 1,
        "type": "PERCENTAGE",
        "code": "SUMMER20",
        "value": 20.0,
        "startDate": "2023-10-01",
        "endDate": "2023-10-31",
        "minSpend": 100.0,
        "maxSpend": 500.0,
        "usesPerUser": 1,
        "usesPerCoupon": 100,
        "status": true
    },
    {
        "id": 2,
        "type": "FIXED_AMOUNT",
        "code": "WINTER50",
        "value": 50.0,
        "startDate": "2023-12-01",
        "endDate": "2023-12-31",
        "minSpend": 200.0,
        "maxSpend": 1000.0,
        "usesPerUser": 2,
        "usesPerCoupon": 50,
        "status": true
    }
]

GET /api/v1/coupons/code/SUMMER20
{
    "id": 1,
    "type": "PERCENTAGE",
    "code": "SUMMER20",
    "value": 20.0,
    "startDate": "2023-10-01",
    "endDate": "2023-10-31",
    "minSpend": 100.0,
    "maxSpend": 500.0,
    "usesPerUser": 1,
    "usesPerCoupon": 100,
    "status": true
}

PUT /api/v1/coupons/1
{
    "type": "PERCENTAGE",
    "code": "SUMMER20",
    "value": 25.0,
    "startDate": "2023-10-01",
    "endDate": "2023-10-31",
    "minSpend": 100.0,
    "maxSpend": 600.0,
    "usesPerUser": 1,
    "usesPerCoupon": 100,
    "status": true
}